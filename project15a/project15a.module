<?php

/**
 * Implements hook_permissions()
 */
function project15a_permission() {
    return array(
        'administer project15a' => array(
            'title' => t('Access Project 15A'),
            'description' => t('Perform administration tasks for Project 15A.')
        )
    );
}

/**
 * Implements hook_menu()
 */
function project15a_menu() {
    $items['admin/config/project15a'] = array(
        'title' => 'Project 15A settings',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('project15a_admin_form'),
        'access arguments' => array('administer project15a')
    );

    $items['admin/project15a'] = array(
        'title' => 'Import stuff',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'project15a_stuff',
        'access arguments' => array('access administration pages'),
    );

    return $items;
}

/**
 * Administer form for Cron Monitor
 */
function project15a_admin_form($form, &$form_state) {
    $form['project15a_subject'] = array(
        '#type' => 'textfield',
        '#title' => t('E-mail subject'),
        '#default_value' => variable_get('project15a_subject', '')
    );

    $form['project15a_email'] = array(
        '#type' => 'textfield',
        '#title' => t('E-mail address'),
        '#attributes' => array(
            ' type' => 'email'
        ),
        '#default_value' => variable_get('project15a_email', '')
    );

    $form['project15a_weekdays'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Send on...'),
        '#options' => project15a_get_weekdays(),
        '#default_value' => variable_get('project15a_weekdays', array())
    );

    return system_settings_form($form);
}

/**
 * Implements hook_cron().
 */
function project15a_cron() {
    watchdog('cron_report',
        t('Cron ran at %time'),
        array('%time' => date("Y-m-d h:i:sa")),
        WATCHDOG_NOTICE
    );

    $published_nodes = project15a_get_all_published_nodes();

    $queue = DrupalQueue::get('cron_report');

    foreach ($published_nodes as $published_node) {
        $queue->createItem($published_node);
    }
}

/**
 * Implements hook_cron_queue_info().
 */
function project15a_cron_queue_info() {
    $queues = array();

    $queues['cron_report'] = array(
        'worker callback' => 'project15a_cron_report',
        'time' => 60,
    );

    return $queues;
}

function project15a_cron_report($published_node) {
    // send report e-mail
    $email = variable_get('project15a_email', '');
    if ($email) {
        $today = strval(date('w') + 1); // fix for 0 value always selected
        $weekdays = variable_get('project15a_weekdays', array());
        $send_today = in_array($today, $weekdays, true);
        if ($send_today) {
            $params = array('nid' => $published_node);
            drupal_mail('project15a', 'cron_report', $email, language_default(), $params);
        }
    }
}

/**
 * Implements hook_mail().
 */
function project15a_mail($key, &$message, $params) {
    switch ($key) {
        case 'cron_report':
            $message['subject'] = variable_get('project15a_subject', 'Cron Report');
            $nid = $params['nid'];
            $node = node_load($nid);
            $title = $node->title;
            $url = url('node/' . $nid, array('absolute' => TRUE));
            $message['body'][] = "<a href='$url'>$title</a>";
            break;
        default:
            break;
    }
}

/* Batch API */

// menu callback function - sets up the batch
function project15a_stuff() {
    $batch = array(
        'operations' => array(),
        'finished' => 'project15a_batch_finished', // runs after batch is finished
        'title' => t('Processing Import'),
        'init_message' => t('Import is starting.'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('Import has encountered an error.'),
    );
    $progress = 0; // where to start
    $limit = 1; // how many to process for each run
    $max = 1; // how many records to process until stop - can do query here to get max times to run
    while ($progress <= $max) {
        $batch['operations'][] = array('project15a_stuff_process', array($progress, $limit));
        $progress = $progress + $limit;
    }
    batch_set($batch);
    batch_process('admin/project15a'); // page to return to after complete
}

// this is what runs multiple times per batch
// progress and limit and is updated during each run
function project15a_stuff_process($progress, $limit, &$context) {
    $nodes = project15a_get_all_published_nodes();
    foreach ($nodes as $node) {
        project15a_cron_report($node);
    }

    // update progress for message
    $progress = $progress + $limit;
    // update message during each run so you know where you are in the process
    $context['message'] = 'Now processing ' . $progress . ' - ' . $context['results'][0] . ' imported';
}

function project15a_batch_finished($success, $results, $operations) {
    if ($success) {
        drupal_set_message('Import is complete');
    } else {
        $error_operation = reset($operations);
        $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
            '%error_operation' => $error_operation[0],
            '@arguments' => print_r($error_operation[1], TRUE)
        ));
        drupal_set_message($message, 'error');
    }
}

/* HELPERS */
function project15a_get_weekdays() {
    // starts from 1, because for some reason 0 value is always selected
    return array(
        2 => 'Monday',
        3 => 'Tuesday',
        4 => 'Wednesday',
        5 => 'Thursday',
        6 => 'Friday',
        7 => 'Saturday',
        1 => 'Sunday'
    );
}

function project15a_get_all_published_nodes() {
    $result = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('status', NODE_PUBLISHED)
        ->execute()
        ->fetchAll(PDO::FETCH_COLUMN);

    return $result;
}
